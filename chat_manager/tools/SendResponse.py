from agency_swarm.tools import BaseTool
from pydantic import Field
import json
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

class SendResponse(BaseTool):
    """
    Sends a response back to the user.
    This tool handles formatting and delivering responses to users based on the content
    generated by the Chat Assistant.
    """
    
    response: str = Field(
        ..., description="The response content to send to the user."
    )
    
    user_id: str = Field(
        ..., description="Unique identifier for the user to receive the response."
    )

    def run(self):
        """
        Format and deliver the response to the user.
        Validates that the response is not empty and sends it to the user.
        """
        # Validate the response
        if not self.response.strip():
            return json.dumps({
                "status": "error",
                "message": "Response cannot be empty"
            })
            
        # Format the response with metadata
        formatted_response = {
            "user_id": self.user_id,
            "response": self.response,
            "timestamp": datetime.now().isoformat(),
            "response_id": f"{self.user_id}-response-{int(datetime.now().timestamp())}"
        }
        
        # In a real implementation, this would send the response to the user through a messaging platform
        # For this example, we'll just print the response and store it in shared state
        print(f"Response to {self.user_id}: {self.response}")
        
        # Store the response in the shared state for tracking
        self._shared_state.set(f"last_response_{self.user_id}", formatted_response)
        
        # Add to conversation history if it exists
        history = self._shared_state.get(f"conversation_history_{self.user_id}", [])
        history.append({"role": "assistant", "content": self.response, "timestamp": formatted_response["timestamp"]})
        self._shared_state.set(f"conversation_history_{self.user_id}", history)
        
        return json.dumps({
            "status": "success",
            "message": "Response sent successfully",
            "response_data": formatted_response
        })


if __name__ == "__main__":
    # Test the tool
    tool = SendResponse(response="I'm doing well, thank you for asking!", user_id="user123")
    result = tool.run()
    print(result) 